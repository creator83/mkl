#include "MKL26Z4.h"                // Device header
#include "tact.h"
#include "delay.h"
#include "ssd1289.h"
#include "shape.h"
#include "pixel.h"
#include "verline.h"
#include "horline.h"
#include "rectangle.h"
#include "colors16bit.h"

Tact frq;


Shape * layer1[3];


extern "C" {
	void SysTick_Handler();
	void PIT_CH1_IRQHandler();
	void IRQ_IRQHandler();
}
const uint8_t image_data_alarm[1300] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfe, 0x00, 0x7f, 0xff, 0xf9, 0xf9, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff,
    0xff, 0xf8, 0xff, 0x8f, 0xff, 0xf7, 0xfe, 0xff, 0xff, 0x1f, 0xf1, 0xff, 0xff,
    0xff, 0xe7, 0xff, 0xe7, 0xff, 0xef, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff,
    0xff, 0xdf, 0xff, 0xf3, 0xff, 0xe0, 0x00, 0x7f, 0xfc, 0xff, 0xff, 0xbf, 0xff,
    0xff, 0x3f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xcf, 0xff,
    0xfe, 0x7f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xe7, 0xff,
    0xfe, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xf7, 0xf0,
    0xfd, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xfb, 0xf0,
    0xf9, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xf9, 0xf0,
    0xfb, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfd, 0xf0,
    0xf7, 0xff, 0xfb, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xfd, 0xff, 0xfe, 0xf0,
    0xf7, 0xff, 0xf7, 0xff, 0xfc, 0x07, 0xfe, 0x03, 0xff, 0xfe, 0xff, 0xfe, 0xf0,
    0xe7, 0xff, 0xef, 0xff, 0xe1, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0x7f, 0xfe, 0x70,
    0xef, 0xff, 0xdf, 0xff, 0x8f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xbf, 0xff, 0x70,
    0xef, 0xff, 0xbf, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xdf, 0xff, 0x70,
    0xef, 0xff, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xcf, 0xff, 0x70,
    0xef, 0xfe, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf7, 0xff, 0x70,
    0xef, 0xfd, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0x70,
    0xef, 0xfb, 0xff, 0x9f, 0xff, 0xc1, 0xf8, 0x3f, 0xff, 0x9f, 0xfd, 0xff, 0x70,
    0xef, 0xf7, 0xff, 0x7f, 0xfe, 0x3e, 0xf7, 0xc7, 0xff, 0xef, 0xfe, 0xff, 0x70,
    0xef, 0xef, 0xfe, 0xff, 0xf9, 0xfe, 0xf7, 0xf9, 0xff, 0xf7, 0xff, 0x7f, 0x70,
    0xe7, 0xcf, 0xfd, 0xff, 0xc7, 0xfe, 0xf7, 0xfe, 0x3f, 0xf9, 0xff, 0x3e, 0x70,
    0xf7, 0xbf, 0xf3, 0xff, 0x9f, 0xfe, 0xf7, 0xff, 0x9f, 0xfc, 0xff, 0xde, 0xf0,
    0xf7, 0x7f, 0xf7, 0xfe, 0x7f, 0xfe, 0x67, 0xff, 0xe7, 0xfe, 0xff, 0xee, 0xf0,
    0xfa, 0xff, 0xef, 0xfc, 0xff, 0xff, 0x6f, 0xff, 0xf3, 0xff, 0x7f, 0xf5, 0xf0,
    0xfd, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0x9f, 0xff, 0xfd, 0xff, 0xbf, 0xfb, 0xf0,
    0xff, 0xff, 0xbf, 0xe7, 0xff, 0xff, 0x6f, 0xff, 0xfe, 0x7f, 0xdf, 0xff, 0xf0,
    0xff, 0xff, 0x3f, 0xcf, 0xff, 0xff, 0x6f, 0xff, 0xff, 0x3f, 0xcf, 0xff, 0xf0,
    0xff, 0xff, 0x7f, 0x9f, 0xff, 0xff, 0x6f, 0xff, 0xff, 0x9f, 0xef, 0xff, 0xf0,
    0xff, 0xfe, 0xff, 0xbf, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xdf, 0xf7, 0xff, 0xf0,
    0xff, 0xfc, 0xff, 0x7f, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xef, 0xf3, 0xff, 0xf0,
    0xff, 0xfd, 0xfe, 0x7f, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xe7, 0xfb, 0xff, 0xf0,
    0xff, 0xfd, 0xfc, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xf3, 0xfb, 0xff, 0xf0,
    0xff, 0xfb, 0xfd, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xf0,
    0xff, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xfd, 0xfc, 0xff, 0xf0,
    0xff, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xfd, 0xfe, 0xff, 0xf0,
    0xff, 0xe7, 0xf7, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xfe, 0xfe, 0x7f, 0xf0,
    0xff, 0xef, 0xf7, 0xff, 0xff, 0xfe, 0x6f, 0xff, 0xff, 0xfe, 0xff, 0x7f, 0xf0,
    0xff, 0xef, 0xef, 0xff, 0xff, 0xfe, 0xef, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xf0,
    0xff, 0xef, 0xef, 0xff, 0xff, 0xfe, 0xe7, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xf0,
    0xff, 0xef, 0xdf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xbf, 0x7f, 0xf0,
    0xff, 0xdf, 0xdf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xbf, 0xbf, 0xf0,
    0xff, 0xdf, 0xdf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xbf, 0xbf, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xbf, 0xbf, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0xf0,
    0xff, 0xbf, 0xc1, 0xff, 0xff, 0xfd, 0xfb, 0xff, 0xff, 0xf8, 0x3f, 0xdf, 0xf0,
    0xff, 0xbf, 0xfc, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xff, 0xf3, 0xff, 0xdf, 0xf0,
    0xff, 0xbf, 0xfe, 0x7f, 0xff, 0xfb, 0xfd, 0xff, 0xff, 0xe7, 0xff, 0xdf, 0xf0,
    0xff, 0xbf, 0xff, 0x7f, 0xff, 0xfb, 0xfd, 0xff, 0xff, 0xef, 0xff, 0xdf, 0xf0,
    0xff, 0xbf, 0xff, 0x7f, 0xff, 0xfb, 0xfe, 0xff, 0xff, 0xef, 0xff, 0xdf, 0xf0,
    0xff, 0xbf, 0xfe, 0xff, 0xff, 0xfb, 0xfe, 0x7f, 0xff, 0xe7, 0xff, 0xdf, 0xf0,
    0xff, 0xbf, 0xe0, 0xff, 0xff, 0xf9, 0xff, 0x7f, 0xff, 0xf0, 0x7f, 0xdf, 0xf0,
    0xff, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xdf, 0xf0,
    0xff, 0x9f, 0xbf, 0xff, 0xff, 0xfe, 0x1f, 0xdf, 0xff, 0xff, 0xdf, 0x9f, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0xe7, 0xef, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xf3, 0xff, 0xff, 0xdf, 0xbf, 0xf0,
    0xff, 0xdf, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0xfb, 0xff, 0xff, 0xbf, 0xbf, 0xf0,
    0xff, 0xdf, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x7d, 0xff, 0xff, 0xbf, 0xbf, 0xf0,
    0xff, 0xef, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0x3f, 0x7f, 0xf0,
    0xff, 0xef, 0xef, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x7f, 0xff, 0x7f, 0x7f, 0xf0,
    0xff, 0xef, 0xef, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xbf, 0xff, 0x7f, 0x7f, 0xf0,
    0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xbf, 0xfe, 0xff, 0x7f, 0xf0,
    0xff, 0xf7, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0xfc, 0xfe, 0xff, 0xf0,
    0xff, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xfd, 0xfe, 0xff, 0xf0,
    0xff, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xf0,
    0xff, 0xfb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xf0,
    0xff, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xf0,
    0xff, 0xfd, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfb, 0xff, 0xf0,
    0xff, 0xfc, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf3, 0xff, 0xf0,
    0xff, 0xfe, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xf7, 0xff, 0xf0,
    0xff, 0xff, 0x7f, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xef, 0xff, 0xf0,
    0xff, 0xff, 0xbf, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xdf, 0xff, 0xf0,
    0xff, 0xff, 0x9f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x9f, 0xff, 0xf0,
    0xff, 0xff, 0xdf, 0xf9, 0xff, 0xff, 0x0f, 0xff, 0xf9, 0xff, 0xbf, 0xff, 0xf0,
    0xff, 0xff, 0xef, 0xfc, 0xff, 0xfe, 0x67, 0xff, 0xf3, 0xff, 0x7f, 0xff, 0xf0,
    0xff, 0xff, 0xf7, 0xff, 0x7f, 0xfc, 0xf7, 0xff, 0xef, 0xfe, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfb, 0xff, 0x8f, 0xfc, 0xf3, 0xff, 0x1f, 0xfd, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfd, 0xff, 0xe7, 0xfc, 0xf3, 0xfe, 0x7f, 0xfb, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfe, 0x7f, 0xf8, 0xfc, 0xf3, 0xf1, 0xff, 0xe7, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0x3f, 0xff, 0x1d, 0xfb, 0x8f, 0xff, 0xcf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0x9f, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xdf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xbd, 0x3f, 0xff, 0xff, 0xff, 0xcb, 0xdf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xb9, 0xcf, 0xff, 0xff, 0xff, 0x39, 0xdf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xbb, 0xf0, 0x7f, 0xff, 0xe0, 0xfd, 0xdf, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0x77, 0xff, 0x83, 0xfc, 0x1f, 0xfe, 0xef, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0x77, 0xff, 0xfc, 0x03, 0xff, 0xfe, 0xef, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xfe, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xf0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};

const uint8_t ArialBlack_8_data[10] = {
		0x10,0xE0,0x24,0xFC,0xFF,0x73,0x87,0xDC,0xEF,0xF3};

enum class color: uint8_t {red, green, blue};

union rgb24
{
	uint32_t code;
	uint8_t color[3];
};


void mainScreen (Ssd1289 &);

void screen ();
void drawScreen (Shape **, uint8_t n);

const uint16_t colors [] = {colors16bit::BLACK, colors16bit::RED, colors16bit::BLUE,  colors16bit::GREEN, colors16bit::CYAN, colors16bit::MAGENTA,  colors16bit::YELLOW, colors16bit::WHITE,
 colors16bit::GRAY, colors16bit::SKY, colors16bit::ORANGE,  colors16bit::PINK, colors16bit::BROWN,colors16bit::VIOLET, colors16bit::SILVER,
 colors16bit::GOLD,  colors16bit::BEGH, colors16bit::NAVY, colors16bit::DARK_GREEN, colors16bit::DARK_CYAN, colors16bit::MAROON,  colors16bit::PURPLE,
colors16bit::LIGHT_GREY,  colors16bit::DARK_GREY};


int main()
{
	Ssd1289 display;
	Ssd1289::sFont lat;
	Shape::driver = &display;
	 mainScreen (display);

	 //uint16_t n = sizeof ArialBlack_8_data/sizeof *ArialBlack_8_data;
	 display.drawArr (30, 230, colors16bit::BLACK, colors16bit::GRAY, image_data_alarm, 13, 100);
	 display.drawArr(100,100,colors16bit::YELLOW, colors16bit::BLACK, ArialBlack_8_data, 1, 10);
	/*display.fillScreen(colors16bit::BLACK);
	display.horLine(50, 0, colors16bit::WHITE, 320, 10);

	Horline hLine (120, 0, colors16bit::WHITE, 320, 5);
	Verline vline (0, 100, colors16bit::WHITE, 200, 5);

		layer1[0] = &hLine;
		layer1[1] = &vline;
		for (uint8_t k=0;k<2;++k)
		{
			layer1[k]->draw();
		}
	uint16_t n = sizeof layer1/sizeof *layer1[0];
	drawScreen (layer1, 2);*/
	while (1)
	{
		/*const uint8_t n = sizeof colors/sizeof *colors;
		for (uint8_t i=0;i<n;++i)
		{
			display.fillScreen(colors [i]);
			delay_ms(1000);
		}*/

	}
}

void mainScreen (Ssd1289 & d)
{
	d.fillScreen(colors16bit::SILVER);



	d.verLine(160, 0, colors16bit::BLACK, 240, 1);
	d.horLine(0, 120, colors16bit::BLACK, 320, 1);


	//gradient
	d.rectangle(5,5, colors16bit::BLACK,150, 110, 1);
	d.rectangle(165,5, colors16bit::BLACK,150, 110, 1);
	d.rectangle(5,125, colors16bit::BLACK,150, 110, 1);
	d.rectangle(165,125, colors16bit::BLACK,150, 110, 1);
	d.horLine(6, 6, colors16bit::GRAY, 149, 109);
	d.horLine(166, 6, colors16bit::GRAY, 149, 109);
	d.horLine(6, 126, colors16bit::GRAY, 149, 109);
	d.horLine(166, 126, colors16bit::GRAY, 149, 109);
}

void screen ()
{
	Horline hLine (120, 0, colors16bit::WHITE, 320, 5);
	Verline vline (0, 100, colors16bit::WHITE, 200, 5);

	layer1[0] = &hLine;
	layer1[1] = &vline;

}

void drawScreen (Shape  ** scr, uint8_t n)
{
	//uint16_t m = sizeof *scr/sizeof **scr[0];
	for (uint8_t i=0 ;i<n;++i)
	{
		(*scr++)->draw();
	}
}




